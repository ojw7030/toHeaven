import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton
from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtCore import QCoreApplication
import torch
from PIL.ImageQt import ImageQt
from PIL import Image
import cv2
from pop import Camera # 카메라


count = 0 # 파일이름용

class MainWindow(QMainWindow):
    
    def __init__(self):
        super().__init__()
        
        #
        cam = Camera(width=1024,height=768)
        cv2.imwrite("pic{}.png".format(count), cam.value)
        print("Complete! count = {}".format(count))
        
        #
        self.exitBt = QPushButton("X",self)
        self.exitBt.move(1180,0)
        self.exitBt.resize(100,100)
        self.exitBt.clicked.connect(self.onExitBtClicked)
        self.exitBt.setStyleSheet("background:transparent; border:0px")
        self.exitBt.setFont(QFont('MesloLGS NF', 25))


        self.model = torch.hub.load('pytorch/vision:v0.10.0', 'deeplabv3_resnet101', pretrained=True)
        self.model.eval()

        self.frame = QLabel(self)
        self.frame.resize(1280, 720)
        
        self.deepLabV3()
        
    def countUp(self): # 파일명 + 숫자 구분함수
        global count
        count = count + 1
        return count
    
    def deepLabV3(self):
        from torchvision import transforms

        if count < 0: # 파일이 없는경우
            print("파일이 없습니다")
            return

        # input_image = Image.open("dog.jpg")
        input_image = Image.open("pic{}.png".format(count))
        preprocess = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ])

        input_tensor = preprocess(input_image)
        input_batch = input_tensor.unsqueeze(0) #create a mini-batch as expected by the model

        input_batch = input_batch.to('cuda')
        self.model.to('cuda')

        with torch.no_grad():
            output = self.model(input_batch)['out'][0]
        output_predictions = output.argmax(0)

        palette = torch.tensor([2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1])
        colors = torch.as_tensor([i for i in range(21)])[:, None] * palette
        colors = (colors % 255).numpy().astype("uint8")

        r = Image.fromarray(output_predictions.byte().cpu().numpy()).resize(input_image.size)
        r.putpalette(colors) #

        #cv2.imwrite("makeMask.jpg", r)

        r = ImageQt(r)

        r.save("makeMask.png",'PNG')

        pixmap = QPixmap.fromImage(r) #
        self.frame.setPixmap(pixmap) #

        # cv2.imwrite("pic_mask.png", pixmap)
        
        self.exitBt.raise_()
        self.combine()

    def onExitBtClicked(self):
        print("Bye")
        QCoreApplication.instance().quit()
    
    def combine(self):
        src = cv2.imread('pic{}.png'.format(count))             # 원본사진
        mask = cv2.imread('makeMask.png')       # 마스크이미지 - imgcut.py
        dst = cv2.imread('tomb.png')           # 배경1
        dst2 = cv2.imread('crown.png')          # 배경2

        # 사이즈 변경 
        src = cv2.resize(src, (1024, 576))
        mask = cv2.resize(mask, (1024, 576))
        dst = cv2.resize(dst, (1024, 576))
        dst2 = cv2.resize(dst2, (1024, 576))

        # mask_hsv = cv2.cvtColor(mask, cv2.COLOR_BGR2HSV)        # 색채변환(hsv)
        # maskg = cv2.cvtColor(mask_hsv, cv2.COLOR_BGR2GRAY)      # 흑백처리

        # cv2.imwrite('makeMaskHsv_gray.png',maskg*1.5)           # 대비값 증가

        # maskgg = cv2.imread('makeMaskHsv_gray.png', cv2.IMREAD_GRAYSCALE)

        cv2.copyTo(src, mask, dst)

        # cv2.imshow('src',src)
        # cv2.imshow('mask', mask)
        
        frame = cv2.copyTo(src, mask, dst)
        
        cv2.imwrite('completed/pic_{}.jpg'.format(count), frame)
        print('complete')

        cv2.imshow('dst', dst)
        
        self.countUp() # 파일이름 구분용 카운트 Up
        
        
        cv2.waitKey(5000) # 5초 대기
        cv2.destroyAllWindows()
        cv2.release()


if __name__ == '__main__':
    click = 0 # 0 초기값, -1 끝내기, 1 사진찍기
    
    while True:
        click = int(input("1 : 사진찍기, -1 : 끝내기 => "))
        if click == 1: # 사진찍기
            #app = QApplication(sys.argv)
            mainWindow = MainWindow()
            click = 0
            
        elif click == -1:
            break;
            
        else:
            print("Error")
    #mainWindow.showFullScreen()
    sys.exit(app.exec_())
